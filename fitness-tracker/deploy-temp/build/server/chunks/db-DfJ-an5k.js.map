{"version":3,"file":"db-DfJ-an5k.js","sources":["../../../.svelte-kit/adapter-node/chunks/db.js"],"sourcesContent":["import Database from \"better-sqlite3\";\nconst db = new Database(\"fitness.db\", { verbose: null });\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS body_measurements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TEXT NOT NULL,\n    weight REAL,\n    body_fat_percentage REAL,\n    muscle_mass REAL,\n    notes TEXT,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n  );\n\n  CREATE TABLE IF NOT EXISTS workouts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TEXT NOT NULL,\n    workout_duration INTEGER,\n    calories_burned INTEGER,\n    notes TEXT,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n  );\n\n  CREATE TABLE IF NOT EXISTS entries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TEXT NOT NULL,\n    weight REAL,\n    body_fat_percentage REAL,\n    muscle_mass REAL,\n    workout_duration INTEGER,\n    calories_burned INTEGER,\n    notes TEXT,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n  );\n\n  CREATE INDEX IF NOT EXISTS idx_body_measurements_date ON body_measurements(date);\n  CREATE INDEX IF NOT EXISTS idx_workouts_date ON workouts(date);\n  CREATE INDEX IF NOT EXISTS idx_entries_date ON entries(date);\n`);\nconst statements = {\n  // Body measurements statements\n  insertBodyMeasurement: db.prepare(`\n    INSERT INTO body_measurements (date, weight, body_fat_percentage, muscle_mass, notes)\n    VALUES (@date, @weight, @body_fat_percentage, @muscle_mass, @notes)\n  `),\n  getBodyMeasurements: db.prepare(\"SELECT * FROM body_measurements ORDER BY date DESC LIMIT ?\"),\n  getBodyMeasurementsByDateRange: db.prepare(`\n    SELECT * FROM body_measurements \n    WHERE date BETWEEN @start_date AND @end_date \n    ORDER BY date ASC\n  `),\n  getLatestBodyMeasurement: db.prepare(\"SELECT * FROM body_measurements ORDER BY date DESC LIMIT 1\"),\n  // Workout statements\n  insertWorkout: db.prepare(`\n    INSERT INTO workouts (date, workout_duration, calories_burned, notes)\n    VALUES (@date, @workout_duration, @calories_burned, @notes)\n  `),\n  getWorkouts: db.prepare(\"SELECT * FROM workouts ORDER BY date DESC LIMIT ?\"),\n  getWorkoutsByDateRange: db.prepare(`\n    SELECT * FROM workouts \n    WHERE date BETWEEN @start_date AND @end_date \n    ORDER BY date ASC\n  `),\n  // Legacy entry statements (kept for backward compatibility)\n  insertEntry: db.prepare(`\n    INSERT INTO entries (date, weight, body_fat_percentage, muscle_mass, workout_duration, calories_burned, notes)\n    VALUES (@date, @weight, @body_fat_percentage, @muscle_mass, @workout_duration, @calories_burned, @notes)\n  `),\n  getEntries: db.prepare(\"SELECT * FROM entries ORDER BY date DESC LIMIT ?\"),\n  getEntriesByDateRange: db.prepare(`\n    SELECT * FROM entries \n    WHERE date BETWEEN @start_date AND @end_date \n    ORDER BY date ASC\n  `),\n  updateEntry: db.prepare(`\n    UPDATE entries \n    SET weight = @weight, body_fat_percentage = @body_fat_percentage, \n        muscle_mass = @muscle_mass, workout_duration = @workout_duration,\n        calories_burned = @calories_burned, notes = @notes\n    WHERE id = @id\n  `),\n  deleteEntry: db.prepare(\"DELETE FROM entries WHERE id = ?\")\n};\nexport {\n  statements as s\n};\n"],"names":[],"mappings":";;AACA,MAAM,EAAE,GAAG,IAAI,QAAQ,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AACxD,EAAE,CAAC,IAAI,CAAC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC,CAAC;AACG,MAAC,UAAU,GAAG;AACnB;AACA,EAAE,qBAAqB,EAAE,EAAE,CAAC,OAAO,CAAC;AACpC;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,mBAAmB,EAAE,EAAE,CAAC,OAAO,CAAC,4DAA4D,CAAC;AAC/F,EAAE,8BAA8B,EAAE,EAAE,CAAC,OAAO,CAAC;AAC7C;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,wBAAwB,EAAE,EAAE,CAAC,OAAO,CAAC,4DAA4D,CAAC;AACpG;AACA,EAAE,aAAa,EAAE,EAAE,CAAC,OAAO,CAAC;AAC5B;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,WAAW,EAAE,EAAE,CAAC,OAAO,CAAC,mDAAmD,CAAC;AAC9E,EAAE,sBAAsB,EAAE,EAAE,CAAC,OAAO,CAAC;AACrC;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ;AACA,EAAE,WAAW,EAAE,EAAE,CAAC,OAAO,CAAC;AAC1B;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,UAAU,EAAE,EAAE,CAAC,OAAO,CAAC,kDAAkD,CAAC;AAC5E,EAAE,qBAAqB,EAAE,EAAE,CAAC,OAAO,CAAC;AACpC;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,WAAW,EAAE,EAAE,CAAC,OAAO,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,WAAW,EAAE,EAAE,CAAC,OAAO,CAAC,kCAAkC;AAC5D;;;;"}